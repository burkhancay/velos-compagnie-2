{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from \"../../state/actions/authentication\";\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          resolve(user);\n          dispatch(handleLogin(newUser));\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.dir(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => console.log(\"user successfully log out\")).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        // verify current user\n        const currentUser = await app.currentUser;\n        resolve(currentUser);\n        dispatch(handleLogin(currentUser)); // retrieve user profile\n        // getUser(currentUser.email)\n        // .then(userProfile => {\n        // dispatch(handleLogin(userProfile))\n        // resolve(currentUser)\n        // })\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser; // getUser(currentUser?.email)\n    // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n    // .catch(err => dispatch(handleAuthenticationError(err)))\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["C:/Users/BRKHNCY/Desktop/velos/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","dir","currentUser","logOut","log","handleUserLogin","handleAuthentication"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,2BAApB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,0BAApC,QAAsE,oCAAtE;;AAGA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,OAAhC,EAAwC;AACpC,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BT,MAAAA,GAAG,CAACU,iBAAJ,CACCC,YADD,CACcJ,OAAO,CAACK,KADtB,EAC6BL,OAAO,CAACM,QADrC,EAECC,IAFD,CAEM,MAAM;AACR,cAAMC,WAAW,GAAGhB,KAAK,CAACiB,WAAN,CAAkBC,aAAlB,CAAgCV,OAAO,CAACK,KAAxC,EAA+CL,OAAO,CAACM,QAAvD,CAApB;AACAb,QAAAA,GAAG,CAACkB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AAClCV,UAAAA,OAAO,CAACU,IAAD,CAAP;AACAd,UAAAA,QAAQ,CAACJ,WAAW,CAACM,OAAD,CAAZ,CAAR;AACH,SAHD;AAIH,OARD,EASCa,KATD,CASQC,GAAD,IAAShB,QAAQ,CAACF,0BAA0B,CAACkB,GAAD,CAA3B,CATxB;AAUH,KAXM,CAAP;AAYH;;AACD,iBAAeC,gBAAf,GAAiC;AAAA;;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACyB,WAAhB;AACA,wBAAAzB,GAAG,CAACyB,WAAJ,sEAAiBC,MAAjB,GACCZ,IADD,CACM,MAAMS,OAAO,CAACI,GAAR,CAAY,2BAAZ,CADZ,EAGCP,KAHD,CAGQC,GAAD,IAASE,OAAO,CAACI,GAAR,CAAYN,GAAZ,CAHhB;AAIH;;AAED,iBAAeO,eAAf,CAA+BhB,KAA/B,EAAsCC,QAAtC,EAA+C;AAC3C,WAAO,IAAIL,OAAJ,CAAaC,OAAD,IAAa;AAC5BT,MAAAA,GAAG,CACFkB,KADD,CACOnB,KAAK,CAACiB,WAAN,CAAkBC,aAAlB,CAAgCL,KAAhC,EAAuCC,QAAvC,CADP,EAECC,IAFD,CAEM,YAAY;AACd;AACA,cAAMW,WAAW,GAAG,MAAMzB,GAAG,CAACyB,WAA9B;AAEAhB,QAAAA,OAAO,CAACgB,WAAD,CAAP;AACApB,QAAAA,QAAQ,CAACJ,WAAW,CAACwB,WAAD,CAAZ,CAAR,CALc,CAMd;AACA;AACA;AACI;AACA;AACA;AACH,OAdL,EAeCL,KAfD,CAeQC,GAAD,IAAShB,QAAQ,CAACF,0BAA0B,CAACkB,GAAD,CAA3B,CAfxB;AAgBC,KAjBE,CAAP;AAmBH;;AAED,iBAAeQ,oBAAf,GAAqC;AACjC,UAAMJ,WAAW,GAAG,MAAMzB,GAAG,CAACyB,WAA9B,CADiC,CAEjC;AACA;AACA;AACH;;AACD,SAAO;AACHnB,IAAAA,sBADG;AACqBgB,IAAAA,gBADrB;AACuCM,IAAAA,eADvC;AACwDC,IAAAA;AADxD,GAAP;AAGH,CAtDD;;AAwDA,eAAezB,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\r\nimport { app } from \"../../service/mongoDB-sdk\";\r\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from \"../../state/actions/authentication\";\r\n\r\n\r\nconst useAuthentication = (dispatch) => {\r\n    function handleUserRegistration(newUser){\r\n        return new Promise((resolve) => {\r\n            app.emailPasswordAuth\r\n            .registerUser(newUser.email, newUser.password)\r\n            .then(() => {\r\n                const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\r\n                app.logIn(credentials).then((user) => {\r\n                    resolve(user);\r\n                    dispatch(handleLogin(newUser));\r\n                });\r\n            })\r\n            .catch((err) => dispatch(handleAuthenticationErrors(err)));\r\n        });\r\n    }\r\n    async function handleUserLogout(){\r\n        console.dir(app.currentUser);\r\n        app.currentUser?.logOut()\r\n        .then(() => console.log(\"user successfully log out\")\r\n        )\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    async function handleUserLogin(email, password){\r\n        return new Promise((resolve) => {\r\n            app\r\n            .logIn(Realm.Credentials.emailPassword(email, password))\r\n            .then(async () => {\r\n                // verify current user\r\n                const currentUser = await app.currentUser;\r\n\r\n                resolve(currentUser);\r\n                dispatch(handleLogin(currentUser));\r\n                // retrieve user profile\r\n                // getUser(currentUser.email)\r\n                // .then(userProfile => {\r\n                    // dispatch(handleLogin(userProfile))\r\n                    // resolve(currentUser)\r\n                    // })\r\n                })\r\n            .catch((err) => dispatch(handleAuthenticationErrors(err)));\r\n            });\r\n        \r\n    }\r\n\r\n    async function handleAuthentication(){\r\n        const currentUser = await app.currentUser;\r\n        // getUser(currentUser?.email)\r\n        // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\r\n        // .catch(err => dispatch(handleAuthenticationError(err)))\r\n    }\r\n    return {\r\n        handleUserRegistration, handleUserLogout, handleUserLogin, handleAuthentication\r\n    };\r\n};\r\n\r\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}