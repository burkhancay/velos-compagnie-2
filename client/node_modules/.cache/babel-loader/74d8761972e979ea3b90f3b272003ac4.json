{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport { handleLogin, handleLogout } from \"../../state/actions/authentication\";\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        resolve();\n        app.logIn(credentials).then(user => {\n          resolve(user);\n        });\n      });\n    });\n  }\n\n  return {\n    handleUserRegistration\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["C:/Users/BRKHNCY/Desktop/velos/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","handleLogin","handleLogout","useAuthentication","dispatch","handleUserRegistration","newUser","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,2BAApB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oCAA1C;;AAGA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,OAAhC,EAAwC;AACpC,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BR,MAAAA,GAAG,CAACS,iBAAJ,CACCC,YADD,CACcJ,OAAO,CAACK,KADtB,EAC6BL,OAAO,CAACM,QADrC,EAECC,IAFD,CAEM,MAAM;AACR,cAAMC,WAAW,GAAGf,KAAK,CAACgB,WAAN,CAAkBC,aAAlB,CAAgCV,OAAO,CAACK,KAAxC,EAA+CL,OAAO,CAACM,QAAvD,CAApB;AACAJ,QAAAA,OAAO;AACPR,QAAAA,GAAG,CAACiB,KAAJ,CAAUH,WAAV,EACCD,IADD,CACOK,IAAD,IAAU;AACZV,UAAAA,OAAO,CAACU,IAAD,CAAP;AACH,SAHD;AAIH,OATD;AAUH,KAXM,CAAP;AAYH;;AACD,SAAO;AACHb,IAAAA;AADG,GAAP;AAGH,CAlBD;;AAoBA,eAAeF,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\r\nimport { app } from \"../../service/mongoDB-sdk\";\r\nimport { handleLogin, handleLogout } from \"../../state/actions/authentication\";\r\n\r\n\r\nconst useAuthentication = (dispatch) => {\r\n    function handleUserRegistration(newUser){\r\n        return new Promise((resolve) => {\r\n            app.emailPasswordAuth\r\n            .registerUser(newUser.email, newUser.password)\r\n            .then(() => {\r\n                const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\r\n                resolve()\r\n                app.logIn(credentials)\r\n                .then((user) => {\r\n                    resolve(user);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return {\r\n        handleUserRegistration\r\n    };\r\n};\r\n\r\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}